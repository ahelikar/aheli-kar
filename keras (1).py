# -*- coding: utf-8 -*-
"""keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B-dWbO9rrv_LW3IWgi-99PYttnRxrcCl

# Installing the neccessary libraries
Here we will import the neccessary libraries .For now on to start with keras image classification .
"""

!pip install streamlit
!pip install keras
!pip install tensorflow

"""# Importing libraries
Here we will import the keras libraries for model prediction and creating CNN's.Also we will import libraries for data preprocessing and data analysis and image processing
"""

from keras.models import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten
import tensorflow as tf
import numpy as np
import pandas as ps
import matplotlib.pyplot as plt

classifier=Sequential()
classifier.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))#first layer
classifier.add(Conv2D(32,(1,2),activation='relu'))#second layer
classifier.add(MaxPooling2D(pool_size=(2,2)))
classifier.add(Flatten())#flattening to 2D
classifier.add(Dense(units=128,activation='relu'))
classifier.add(Dense(units=10,activation='softmax'))#last layer
classifier.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])#optimization of neural network

"""Loading image dataset"""


fashion_mnist = tf.keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

train_labels

test_images
from keras.applications import VGG16

# Specify the input shape for the VGG16 model (at least 32x32 with 3 channels)
pretrained_model=VGG16(include_top=False,weights='imagenet', input_shape=(32, 32, 3))
from tensorflow.keras import layers, models

# Use the pre-trained VGG16 model as the base
base_model = pretrained_model # pretrained_model is already defined in cell IKTbmlcBXDqI

# Freeze the base model layers so they are not trained
base_model.trainable = False

# Create a new model on top of the base model
model = models.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(10, activation='softmax') # Use 10 units for the Fashion MNIST classes
])

# Compile the new model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()



"""Plotting train images"""

plt.show()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()

"""labelling image pixeel"""

training_images=train_images/255.0
testing_images=test_images/255.0

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(train_labels[i])
  plt.show()

model=classifier.fit(training_images, train_labels, epochs=5, validation_data=(testing_images, test_labels))

test_loss,test_acc=classifier.evaluate(testing_images,test_labels,verbose=2)
print(test_acc)#testing model accuracy

prob=classifier.predict(testing_images)

predictions = classifier.predict(testing_images)
prob = tf.nn.softmax((predictions))

prob[0]

np.argmax(prob[0])

test_labels[0]

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

def plot_image(i,predictions_array,true_labels,images):
  true_label=true_labels[i]
  img=images[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(img,cmap=plt.cm.binary)
  predicted_label=np.argmax(predictions_array)
  if predicted_label==true_label:
    color='blue'
  else:
    color='red'
  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i,predictions_array,true_labels):
  true_label=true_labels[i]
  plt.grid(False)
  plt.xticks(range(10))
  plt.yticks([])
  thisplot=plt.bar(range(10),predictions_array,color="#777777")
  plt.ylim([0,1])
  predicted_label=np.argmax(predictions_array)
  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')

"""testing the first data with trained model"""

i=0
  plt.figure(figsize=(6,3))
  plt.subplot(1,2,1)
  plot_image(i,predictions[i],test_labels,test_images)
  plt.subplot(1,2,2)
  plot_value_array(i,predictions[i],test_labels)
  plt.show()

i=12
  plt.figure(figsize=(6,3))
  plt.subplot(1,2,1)
  plot_image(i,predictions[i],test_labels,test_images)
  plt.subplot(1,2,2)
  plot_value_array(i,predictions[i],test_labels)
  plt.show()

# Plot the first X test images, their predicted labels, and the true labels.
# Color correct predictions in blue and incorrect predictions in red.
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.show()

# Grab an image from the test dataset.
img = test_images[1]

print(img.shape)

# Add the image to a batch where it's the only member.
img = (np.expand_dims(img,0))


print(img.shape)

predictions_single = classifier.predict(img)

print(predictions_single)

plot_value_array(1, predictions_single[0], test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)
plt.show()
